图搜问题

-图是什么 -> 大部分情况是隐式图 
  -节点:元素
	-边:(最终解中)元素之间的关系
-常见题型
  -联通分量
	-判断是否有解/任意解
	-找满足某种要求的解
	-求全部解
-判断是否有解/任意解:dfs/bfs 
-找全部解:dfs 
-找满足某种要求的解
 -dfs+剪枝 -> 相当于枚举全部 因为worst case是都满足
   -在一个解上修改一点 得到下一步 (放弃最后一步 回溯)
 -bfs -> 步数最少或者最短路 
   -dfs如何记录到达当前状态的路径是难点 
	 


DFS
-stack
 -defination
   -FILO
	 -只有栈顶元素可见
	 -网页浏览器的后退按钮
 -operation
   -if empty O1
	 -visit top element O1 -> peek()
	 -push O1
	 -pop O1 
	 -number of elements O1 
	 -clean stack O1 or On depends on implementation 
	 -space On 
 -implmentation
   -array or linkedList
-dfs algo
  -从起点开始尽可能深入滴扩展
	  -每次试图访问一个之前没有访问过的节点
		-有回退!!如果没有符合要求的节点存在 则回到上一个访问的节点
		-注意点: 节点判重  路径记录
-dfs structure 
 -non-recursive
   -起点start入栈: pre[start] == null -> 起点之前为空
    while (stack s is NOT empty) {
      取栈顶元素x; // 此时只是看 没有弹出x
        if (x has non-visited neighbors) {
		  	// 此处要有数据结构去记录x那些孩子or邻居访问过
          visited neighbor y, push y on stack, and pre[y] = x
        } else {
          pop x; 
        }			
    }   
  注意dfs的顺序,另一种方式是让x立刻出栈,并把x的所有孩子入栈
	-recursive 
	  -本质:在一条路上"修改一点" eg:迷宫问题
		-记录必要状态:如果一个点走不出去,可以堵死这个点以减少不必要的搜索->剪枝
    dfs(arguments) {
      递归边界/退出的条件:是否是要求的解
			  if true: return 
				else: next step
			从当前方案中枚举所有可能的"向前"走一步
			  -多放置一个皇后
				-从迷宫中多走一个方向
			递归下一层
		  记录状态:标记该点是否可行/通不通
    }    
		
-example
 -二叉树的三种遍历 lc145 146 94
 -N queens lc51 52
 
-dfs vs bfs
  -dfs:单路扩展,栈里始终存放着当前路径的终点
	-bfs:多路同时扩展,队列里存若干条路径的终点

-extended applications
  -记录额外信息
	  -timestamp
		  -dfs a tree, give two timestamps to each node
			  -first visit time 
				-time when all of children visited 
			-two timestamps define a interval 
			-有子孙关系的两个节点,定义的线段是完全包含关系
	-求strong connected componets
    -two time dfs
  -迭代加深dfs -> 时空权衡 找最优解
    -bfs弱点:走太广  dfs弱点:走太深
    -限制dfs树的高度d?
      -通过二分d找到刚好能找到解的深度
        -找不到解 d增大; 能找到解 d减小
        -注意此时会有节点被多次遍历(不同的d值对应不同的遍历)				
	























